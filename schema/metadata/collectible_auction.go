// Code generated by "enumer --values --type=CollectibleAuctionAction --transform=snake --trimprefix=ActionCollectibleAuction --output collectible_auction.go --json --sql"; DO NOT EDIT.

package metadata

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _CollectibleAuctionActionName = "createbidfinalizecancelupdateinvalidate"

var _CollectibleAuctionActionIndex = [...]uint8{0, 6, 9, 17, 23, 29, 39}

const _CollectibleAuctionActionLowerName = "createbidfinalizecancelupdateinvalidate"

func (i CollectibleAuctionAction) String() string {
	i -= 1
	if i >= CollectibleAuctionAction(len(_CollectibleAuctionActionIndex)-1) {
		return fmt.Sprintf("CollectibleAuctionAction(%d)", i+1)
	}
	return _CollectibleAuctionActionName[_CollectibleAuctionActionIndex[i]:_CollectibleAuctionActionIndex[i+1]]
}

func (CollectibleAuctionAction) Values() []string {
	return CollectibleAuctionActionStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CollectibleAuctionActionNoOp() {
	var x [1]struct{}
	_ = x[ActionCollectibleAuctionCreate-(1)]
	_ = x[ActionCollectibleAuctionBid-(2)]
	_ = x[ActionCollectibleAuctionFinalize-(3)]
	_ = x[ActionCollectibleAuctionCancel-(4)]
	_ = x[ActionCollectibleAuctionUpdate-(5)]
	_ = x[ActionCollectibleAuctionInvalidate-(6)]
}

var _CollectibleAuctionActionValues = []CollectibleAuctionAction{ActionCollectibleAuctionCreate, ActionCollectibleAuctionBid, ActionCollectibleAuctionFinalize, ActionCollectibleAuctionCancel, ActionCollectibleAuctionUpdate, ActionCollectibleAuctionInvalidate}

var _CollectibleAuctionActionNameToValueMap = map[string]CollectibleAuctionAction{
	_CollectibleAuctionActionName[0:6]:        ActionCollectibleAuctionCreate,
	_CollectibleAuctionActionLowerName[0:6]:   ActionCollectibleAuctionCreate,
	_CollectibleAuctionActionName[6:9]:        ActionCollectibleAuctionBid,
	_CollectibleAuctionActionLowerName[6:9]:   ActionCollectibleAuctionBid,
	_CollectibleAuctionActionName[9:17]:       ActionCollectibleAuctionFinalize,
	_CollectibleAuctionActionLowerName[9:17]:  ActionCollectibleAuctionFinalize,
	_CollectibleAuctionActionName[17:23]:      ActionCollectibleAuctionCancel,
	_CollectibleAuctionActionLowerName[17:23]: ActionCollectibleAuctionCancel,
	_CollectibleAuctionActionName[23:29]:      ActionCollectibleAuctionUpdate,
	_CollectibleAuctionActionLowerName[23:29]: ActionCollectibleAuctionUpdate,
	_CollectibleAuctionActionName[29:39]:      ActionCollectibleAuctionInvalidate,
	_CollectibleAuctionActionLowerName[29:39]: ActionCollectibleAuctionInvalidate,
}

var _CollectibleAuctionActionNames = []string{
	_CollectibleAuctionActionName[0:6],
	_CollectibleAuctionActionName[6:9],
	_CollectibleAuctionActionName[9:17],
	_CollectibleAuctionActionName[17:23],
	_CollectibleAuctionActionName[23:29],
	_CollectibleAuctionActionName[29:39],
}

// CollectibleAuctionActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CollectibleAuctionActionString(s string) (CollectibleAuctionAction, error) {
	if val, ok := _CollectibleAuctionActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CollectibleAuctionActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CollectibleAuctionAction values", s)
}

// CollectibleAuctionActionValues returns all values of the enum
func CollectibleAuctionActionValues() []CollectibleAuctionAction {
	return _CollectibleAuctionActionValues
}

// CollectibleAuctionActionStrings returns a slice of all String values of the enum
func CollectibleAuctionActionStrings() []string {
	strs := make([]string, len(_CollectibleAuctionActionNames))
	copy(strs, _CollectibleAuctionActionNames)
	return strs
}

// IsACollectibleAuctionAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CollectibleAuctionAction) IsACollectibleAuctionAction() bool {
	for _, v := range _CollectibleAuctionActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CollectibleAuctionAction
func (i CollectibleAuctionAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CollectibleAuctionAction
func (i *CollectibleAuctionAction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CollectibleAuctionAction should be a string, got %s", data)
	}

	var err error
	*i, err = CollectibleAuctionActionString(s)
	return err
}

func (i CollectibleAuctionAction) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *CollectibleAuctionAction) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of CollectibleAuctionAction: %[1]T(%[1]v)", value)
	}

	val, err := CollectibleAuctionActionString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
