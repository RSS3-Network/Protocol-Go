// Code generated by "enumer --values --type=GovernanceVoteAction --transform=snake --trimprefix=ActionGovernanceVote --output governance_vote.go --json --sql"; DO NOT EDIT.

package metadata

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _GovernanceVoteActionName = "action_governance_foraction_governance_againstaction_governance_abstain"

var _GovernanceVoteActionIndex = [...]uint8{0, 21, 46, 71}

const _GovernanceVoteActionLowerName = "action_governance_foraction_governance_againstaction_governance_abstain"

func (i GovernanceVoteAction) String() string {
	i -= 1
	if i >= GovernanceVoteAction(len(_GovernanceVoteActionIndex)-1) {
		return fmt.Sprintf("GovernanceVoteAction(%d)", i+1)
	}
	return _GovernanceVoteActionName[_GovernanceVoteActionIndex[i]:_GovernanceVoteActionIndex[i+1]]
}

func (GovernanceVoteAction) Values() []string {
	return GovernanceVoteActionStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _GovernanceVoteActionNoOp() {
	var x [1]struct{}
	_ = x[ActionGovernanceFor-(1)]
	_ = x[ActionGovernanceAgainst-(2)]
	_ = x[ActionGovernanceAbstain-(3)]
}

var _GovernanceVoteActionValues = []GovernanceVoteAction{ActionGovernanceFor, ActionGovernanceAgainst, ActionGovernanceAbstain}

var _GovernanceVoteActionNameToValueMap = map[string]GovernanceVoteAction{
	_GovernanceVoteActionName[0:21]:       ActionGovernanceFor,
	_GovernanceVoteActionLowerName[0:21]:  ActionGovernanceFor,
	_GovernanceVoteActionName[21:46]:      ActionGovernanceAgainst,
	_GovernanceVoteActionLowerName[21:46]: ActionGovernanceAgainst,
	_GovernanceVoteActionName[46:71]:      ActionGovernanceAbstain,
	_GovernanceVoteActionLowerName[46:71]: ActionGovernanceAbstain,
}

var _GovernanceVoteActionNames = []string{
	_GovernanceVoteActionName[0:21],
	_GovernanceVoteActionName[21:46],
	_GovernanceVoteActionName[46:71],
}

// GovernanceVoteActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func GovernanceVoteActionString(s string) (GovernanceVoteAction, error) {
	if val, ok := _GovernanceVoteActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _GovernanceVoteActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to GovernanceVoteAction values", s)
}

// GovernanceVoteActionValues returns all values of the enum
func GovernanceVoteActionValues() []GovernanceVoteAction {
	return _GovernanceVoteActionValues
}

// GovernanceVoteActionStrings returns a slice of all String values of the enum
func GovernanceVoteActionStrings() []string {
	strs := make([]string, len(_GovernanceVoteActionNames))
	copy(strs, _GovernanceVoteActionNames)
	return strs
}

// IsAGovernanceVoteAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i GovernanceVoteAction) IsAGovernanceVoteAction() bool {
	for _, v := range _GovernanceVoteActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for GovernanceVoteAction
func (i GovernanceVoteAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for GovernanceVoteAction
func (i *GovernanceVoteAction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("GovernanceVoteAction should be a string, got %s", data)
	}

	var err error
	*i, err = GovernanceVoteActionString(s)
	return err
}

func (i GovernanceVoteAction) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *GovernanceVoteAction) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of GovernanceVoteAction: %[1]T(%[1]v)", value)
	}

	val, err := GovernanceVoteActionString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
