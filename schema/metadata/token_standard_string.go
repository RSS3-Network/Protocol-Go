// Code generated by "enumer --values --type=Standard --output token_standard_string.go --linecomment --json --sql"; DO NOT EDIT.

package metadata

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const (
	_StandardName_0      = "Unknown"
	_StandardLowerName_0 = "unknown"
	_StandardName_1      = "ERC-20"
	_StandardLowerName_1 = "erc-20"
	_StandardName_2      = "ERC-165"
	_StandardLowerName_2 = "erc-165"
	_StandardName_3      = "ERC-721"
	_StandardLowerName_3 = "erc-721"
	_StandardName_4      = "ERC-1155"
	_StandardLowerName_4 = "erc-1155"
	_StandardName_5      = "ERC-1967"
	_StandardLowerName_5 = "erc-1967"
)

var (
	_StandardIndex_0 = [...]uint8{0, 7}
	_StandardIndex_1 = [...]uint8{0, 6}
	_StandardIndex_2 = [...]uint8{0, 7}
	_StandardIndex_3 = [...]uint8{0, 7}
	_StandardIndex_4 = [...]uint8{0, 8}
	_StandardIndex_5 = [...]uint8{0, 8}
)

func (i Standard) String() string {
	switch {
	case i == 0:
		return _StandardName_0
	case i == 20:
		return _StandardName_1
	case i == 165:
		return _StandardName_2
	case i == 721:
		return _StandardName_3
	case i == 1155:
		return _StandardName_4
	case i == 1967:
		return _StandardName_5
	default:
		return fmt.Sprintf("Standard(%d)", i)
	}
}

func (Standard) Values() []string {
	return StandardStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _StandardNoOp() {
	var x [1]struct{}
	_ = x[StandardUnknown-(0)]
	_ = x[StandardERC20-(20)]
	_ = x[StandardERC165-(165)]
	_ = x[StandardERC721-(721)]
	_ = x[StandardERC1155-(1155)]
	_ = x[StandardERC1967-(1967)]
}

var _StandardValues = []Standard{StandardUnknown, StandardERC20, StandardERC165, StandardERC721, StandardERC1155, StandardERC1967}

var _StandardNameToValueMap = map[string]Standard{
	_StandardName_0[0:7]:      StandardUnknown,
	_StandardLowerName_0[0:7]: StandardUnknown,
	_StandardName_1[0:6]:      StandardERC20,
	_StandardLowerName_1[0:6]: StandardERC20,
	_StandardName_2[0:7]:      StandardERC165,
	_StandardLowerName_2[0:7]: StandardERC165,
	_StandardName_3[0:7]:      StandardERC721,
	_StandardLowerName_3[0:7]: StandardERC721,
	_StandardName_4[0:8]:      StandardERC1155,
	_StandardLowerName_4[0:8]: StandardERC1155,
	_StandardName_5[0:8]:      StandardERC1967,
	_StandardLowerName_5[0:8]: StandardERC1967,
}

var _StandardNames = []string{
	_StandardName_0[0:7],
	_StandardName_1[0:6],
	_StandardName_2[0:7],
	_StandardName_3[0:7],
	_StandardName_4[0:8],
	_StandardName_5[0:8],
}

// StandardString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StandardString(s string) (Standard, error) {
	if val, ok := _StandardNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _StandardNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Standard values", s)
}

// StandardValues returns all values of the enum
func StandardValues() []Standard {
	return _StandardValues
}

// StandardStrings returns a slice of all String values of the enum
func StandardStrings() []string {
	strs := make([]string, len(_StandardNames))
	copy(strs, _StandardNames)
	return strs
}

// IsAStandard returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Standard) IsAStandard() bool {
	for _, v := range _StandardValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Standard
func (i Standard) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Standard
func (i *Standard) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Standard should be a string, got %s", data)
	}

	var err error
	*i, err = StandardString(s)
	return err
}

func (i Standard) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Standard) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Standard: %[1]T(%[1]v)", value)
	}

	val, err := StandardString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
