// Code generated by "enumer --values --type=ExchangeLoanAction --transform=snake --trimprefix=ActionExchangeLoan --output exchange_loan.go --json --sql"; DO NOT EDIT.

package metadata

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _ExchangeLoanActionName = "createrepayrefinanceliquidateseize"

var _ExchangeLoanActionIndex = [...]uint8{0, 6, 11, 20, 29, 34}

const _ExchangeLoanActionLowerName = "createrepayrefinanceliquidateseize"

func (i ExchangeLoanAction) String() string {
	i -= 1
	if i >= ExchangeLoanAction(len(_ExchangeLoanActionIndex)-1) {
		return fmt.Sprintf("ExchangeLoanAction(%d)", i+1)
	}
	return _ExchangeLoanActionName[_ExchangeLoanActionIndex[i]:_ExchangeLoanActionIndex[i+1]]
}

func (ExchangeLoanAction) Values() []string {
	return ExchangeLoanActionStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ExchangeLoanActionNoOp() {
	var x [1]struct{}
	_ = x[ActionExchangeLoanCreate-(1)]
	_ = x[ActionExchangeLoanRepay-(2)]
	_ = x[ActionExchangeLoanRefinance-(3)]
	_ = x[ActionExchangeLoanLiquidate-(4)]
	_ = x[ActionExchangeLoanSeize-(5)]
}

var _ExchangeLoanActionValues = []ExchangeLoanAction{ActionExchangeLoanCreate, ActionExchangeLoanRepay, ActionExchangeLoanRefinance, ActionExchangeLoanLiquidate, ActionExchangeLoanSeize}

var _ExchangeLoanActionNameToValueMap = map[string]ExchangeLoanAction{
	_ExchangeLoanActionName[0:6]:        ActionExchangeLoanCreate,
	_ExchangeLoanActionLowerName[0:6]:   ActionExchangeLoanCreate,
	_ExchangeLoanActionName[6:11]:       ActionExchangeLoanRepay,
	_ExchangeLoanActionLowerName[6:11]:  ActionExchangeLoanRepay,
	_ExchangeLoanActionName[11:20]:      ActionExchangeLoanRefinance,
	_ExchangeLoanActionLowerName[11:20]: ActionExchangeLoanRefinance,
	_ExchangeLoanActionName[20:29]:      ActionExchangeLoanLiquidate,
	_ExchangeLoanActionLowerName[20:29]: ActionExchangeLoanLiquidate,
	_ExchangeLoanActionName[29:34]:      ActionExchangeLoanSeize,
	_ExchangeLoanActionLowerName[29:34]: ActionExchangeLoanSeize,
}

var _ExchangeLoanActionNames = []string{
	_ExchangeLoanActionName[0:6],
	_ExchangeLoanActionName[6:11],
	_ExchangeLoanActionName[11:20],
	_ExchangeLoanActionName[20:29],
	_ExchangeLoanActionName[29:34],
}

// ExchangeLoanActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ExchangeLoanActionString(s string) (ExchangeLoanAction, error) {
	if val, ok := _ExchangeLoanActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ExchangeLoanActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ExchangeLoanAction values", s)
}

// ExchangeLoanActionValues returns all values of the enum
func ExchangeLoanActionValues() []ExchangeLoanAction {
	return _ExchangeLoanActionValues
}

// ExchangeLoanActionStrings returns a slice of all String values of the enum
func ExchangeLoanActionStrings() []string {
	strs := make([]string, len(_ExchangeLoanActionNames))
	copy(strs, _ExchangeLoanActionNames)
	return strs
}

// IsAExchangeLoanAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ExchangeLoanAction) IsAExchangeLoanAction() bool {
	for _, v := range _ExchangeLoanActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ExchangeLoanAction
func (i ExchangeLoanAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ExchangeLoanAction
func (i *ExchangeLoanAction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ExchangeLoanAction should be a string, got %s", data)
	}

	var err error
	*i, err = ExchangeLoanActionString(s)
	return err
}

func (i ExchangeLoanAction) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *ExchangeLoanAction) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of ExchangeLoanAction: %[1]T(%[1]v)", value)
	}

	val, err := ExchangeLoanActionString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
