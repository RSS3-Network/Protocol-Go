// Code generated by "enumer --values --type=CollectibleTradeAction --transform=snake --trimprefix=ActionCollectibleTrade --output collectible_trade.go --json --sql"; DO NOT EDIT.

package metadata

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _CollectibleTradeActionName = "buysell"

var _CollectibleTradeActionIndex = [...]uint8{0, 3, 7}

const _CollectibleTradeActionLowerName = "buysell"

func (i CollectibleTradeAction) String() string {
	i -= 1
	if i >= CollectibleTradeAction(len(_CollectibleTradeActionIndex)-1) {
		return fmt.Sprintf("CollectibleTradeAction(%d)", i+1)
	}
	return _CollectibleTradeActionName[_CollectibleTradeActionIndex[i]:_CollectibleTradeActionIndex[i+1]]
}

func (CollectibleTradeAction) Values() []string {
	return CollectibleTradeActionStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CollectibleTradeActionNoOp() {
	var x [1]struct{}
	_ = x[ActionCollectibleTradeBuy-(1)]
	_ = x[ActionCollectibleTradeSell-(2)]
}

var _CollectibleTradeActionValues = []CollectibleTradeAction{ActionCollectibleTradeBuy, ActionCollectibleTradeSell}

var _CollectibleTradeActionNameToValueMap = map[string]CollectibleTradeAction{
	_CollectibleTradeActionName[0:3]:      ActionCollectibleTradeBuy,
	_CollectibleTradeActionLowerName[0:3]: ActionCollectibleTradeBuy,
	_CollectibleTradeActionName[3:7]:      ActionCollectibleTradeSell,
	_CollectibleTradeActionLowerName[3:7]: ActionCollectibleTradeSell,
}

var _CollectibleTradeActionNames = []string{
	_CollectibleTradeActionName[0:3],
	_CollectibleTradeActionName[3:7],
}

// CollectibleTradeActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CollectibleTradeActionString(s string) (CollectibleTradeAction, error) {
	if val, ok := _CollectibleTradeActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CollectibleTradeActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CollectibleTradeAction values", s)
}

// CollectibleTradeActionValues returns all values of the enum
func CollectibleTradeActionValues() []CollectibleTradeAction {
	return _CollectibleTradeActionValues
}

// CollectibleTradeActionStrings returns a slice of all String values of the enum
func CollectibleTradeActionStrings() []string {
	strs := make([]string, len(_CollectibleTradeActionNames))
	copy(strs, _CollectibleTradeActionNames)
	return strs
}

// IsACollectibleTradeAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CollectibleTradeAction) IsACollectibleTradeAction() bool {
	for _, v := range _CollectibleTradeActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CollectibleTradeAction
func (i CollectibleTradeAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CollectibleTradeAction
func (i *CollectibleTradeAction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CollectibleTradeAction should be a string, got %s", data)
	}

	var err error
	*i, err = CollectibleTradeActionString(s)
	return err
}

func (i CollectibleTradeAction) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *CollectibleTradeAction) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of CollectibleTradeAction: %[1]T(%[1]v)", value)
	}

	val, err := CollectibleTradeActionString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
