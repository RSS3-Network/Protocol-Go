// Code generated by "enumer --values --type=ExchangeLiquidityAction --transform=snake --trimprefix=ActionExchangeLiquidity --output exchange_liquidity.go --json --sql"; DO NOT EDIT.

package metadata

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _ExchangeLiquidityActionName = "addborrowcollectremoverepaysupplywithdraw"

var _ExchangeLiquidityActionIndex = [...]uint8{0, 3, 9, 16, 22, 27, 33, 41}

const _ExchangeLiquidityActionLowerName = "addborrowcollectremoverepaysupplywithdraw"

func (i ExchangeLiquidityAction) String() string {
	i -= 1
	if i >= ExchangeLiquidityAction(len(_ExchangeLiquidityActionIndex)-1) {
		return fmt.Sprintf("ExchangeLiquidityAction(%d)", i+1)
	}
	return _ExchangeLiquidityActionName[_ExchangeLiquidityActionIndex[i]:_ExchangeLiquidityActionIndex[i+1]]
}

func (ExchangeLiquidityAction) Values() []string {
	return ExchangeLiquidityActionStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ExchangeLiquidityActionNoOp() {
	var x [1]struct{}
	_ = x[ActionExchangeLiquidityAdd-(1)]
	_ = x[ActionExchangeLiquidityBorrow-(2)]
	_ = x[ActionExchangeLiquidityCollect-(3)]
	_ = x[ActionExchangeLiquidityRemove-(4)]
	_ = x[ActionExchangeLiquidityRepay-(5)]
	_ = x[ActionExchangeLiquiditySupply-(6)]
	_ = x[ActionExchangeLiquidityWithdraw-(7)]
}

var _ExchangeLiquidityActionValues = []ExchangeLiquidityAction{ActionExchangeLiquidityAdd, ActionExchangeLiquidityBorrow, ActionExchangeLiquidityCollect, ActionExchangeLiquidityRemove, ActionExchangeLiquidityRepay, ActionExchangeLiquiditySupply, ActionExchangeLiquidityWithdraw}

var _ExchangeLiquidityActionNameToValueMap = map[string]ExchangeLiquidityAction{
	_ExchangeLiquidityActionName[0:3]:        ActionExchangeLiquidityAdd,
	_ExchangeLiquidityActionLowerName[0:3]:   ActionExchangeLiquidityAdd,
	_ExchangeLiquidityActionName[3:9]:        ActionExchangeLiquidityBorrow,
	_ExchangeLiquidityActionLowerName[3:9]:   ActionExchangeLiquidityBorrow,
	_ExchangeLiquidityActionName[9:16]:       ActionExchangeLiquidityCollect,
	_ExchangeLiquidityActionLowerName[9:16]:  ActionExchangeLiquidityCollect,
	_ExchangeLiquidityActionName[16:22]:      ActionExchangeLiquidityRemove,
	_ExchangeLiquidityActionLowerName[16:22]: ActionExchangeLiquidityRemove,
	_ExchangeLiquidityActionName[22:27]:      ActionExchangeLiquidityRepay,
	_ExchangeLiquidityActionLowerName[22:27]: ActionExchangeLiquidityRepay,
	_ExchangeLiquidityActionName[27:33]:      ActionExchangeLiquiditySupply,
	_ExchangeLiquidityActionLowerName[27:33]: ActionExchangeLiquiditySupply,
	_ExchangeLiquidityActionName[33:41]:      ActionExchangeLiquidityWithdraw,
	_ExchangeLiquidityActionLowerName[33:41]: ActionExchangeLiquidityWithdraw,
}

var _ExchangeLiquidityActionNames = []string{
	_ExchangeLiquidityActionName[0:3],
	_ExchangeLiquidityActionName[3:9],
	_ExchangeLiquidityActionName[9:16],
	_ExchangeLiquidityActionName[16:22],
	_ExchangeLiquidityActionName[22:27],
	_ExchangeLiquidityActionName[27:33],
	_ExchangeLiquidityActionName[33:41],
}

// ExchangeLiquidityActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ExchangeLiquidityActionString(s string) (ExchangeLiquidityAction, error) {
	if val, ok := _ExchangeLiquidityActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ExchangeLiquidityActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ExchangeLiquidityAction values", s)
}

// ExchangeLiquidityActionValues returns all values of the enum
func ExchangeLiquidityActionValues() []ExchangeLiquidityAction {
	return _ExchangeLiquidityActionValues
}

// ExchangeLiquidityActionStrings returns a slice of all String values of the enum
func ExchangeLiquidityActionStrings() []string {
	strs := make([]string, len(_ExchangeLiquidityActionNames))
	copy(strs, _ExchangeLiquidityActionNames)
	return strs
}

// IsAExchangeLiquidityAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ExchangeLiquidityAction) IsAExchangeLiquidityAction() bool {
	for _, v := range _ExchangeLiquidityActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ExchangeLiquidityAction
func (i ExchangeLiquidityAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ExchangeLiquidityAction
func (i *ExchangeLiquidityAction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ExchangeLiquidityAction should be a string, got %s", data)
	}

	var err error
	*i, err = ExchangeLiquidityActionString(s)
	return err
}

func (i ExchangeLiquidityAction) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *ExchangeLiquidityAction) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of ExchangeLiquidityAction: %[1]T(%[1]v)", value)
	}

	val, err := ExchangeLiquidityActionString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
