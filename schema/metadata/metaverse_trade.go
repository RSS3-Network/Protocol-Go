// Code generated by "enumer --values --type=MetaverseTradeAction --transform=snake --trimprefix=ActionMetaverseTrade --output metaverse_trade.go --json --sql"; DO NOT EDIT.

package metadata

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _MetaverseTradeActionName = "buylistsell"

var _MetaverseTradeActionIndex = [...]uint8{0, 3, 7, 11}

const _MetaverseTradeActionLowerName = "buylistsell"

func (i MetaverseTradeAction) String() string {
	i -= 1
	if i >= MetaverseTradeAction(len(_MetaverseTradeActionIndex)-1) {
		return fmt.Sprintf("MetaverseTradeAction(%d)", i+1)
	}
	return _MetaverseTradeActionName[_MetaverseTradeActionIndex[i]:_MetaverseTradeActionIndex[i+1]]
}

func (MetaverseTradeAction) Values() []string {
	return MetaverseTradeActionStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MetaverseTradeActionNoOp() {
	var x [1]struct{}
	_ = x[ActionMetaverseTradeBuy-(1)]
	_ = x[ActionMetaverseTradeList-(2)]
	_ = x[ActionMetaverseTradeSell-(3)]
}

var _MetaverseTradeActionValues = []MetaverseTradeAction{ActionMetaverseTradeBuy, ActionMetaverseTradeList, ActionMetaverseTradeSell}

var _MetaverseTradeActionNameToValueMap = map[string]MetaverseTradeAction{
	_MetaverseTradeActionName[0:3]:       ActionMetaverseTradeBuy,
	_MetaverseTradeActionLowerName[0:3]:  ActionMetaverseTradeBuy,
	_MetaverseTradeActionName[3:7]:       ActionMetaverseTradeList,
	_MetaverseTradeActionLowerName[3:7]:  ActionMetaverseTradeList,
	_MetaverseTradeActionName[7:11]:      ActionMetaverseTradeSell,
	_MetaverseTradeActionLowerName[7:11]: ActionMetaverseTradeSell,
}

var _MetaverseTradeActionNames = []string{
	_MetaverseTradeActionName[0:3],
	_MetaverseTradeActionName[3:7],
	_MetaverseTradeActionName[7:11],
}

// MetaverseTradeActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MetaverseTradeActionString(s string) (MetaverseTradeAction, error) {
	if val, ok := _MetaverseTradeActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MetaverseTradeActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MetaverseTradeAction values", s)
}

// MetaverseTradeActionValues returns all values of the enum
func MetaverseTradeActionValues() []MetaverseTradeAction {
	return _MetaverseTradeActionValues
}

// MetaverseTradeActionStrings returns a slice of all String values of the enum
func MetaverseTradeActionStrings() []string {
	strs := make([]string, len(_MetaverseTradeActionNames))
	copy(strs, _MetaverseTradeActionNames)
	return strs
}

// IsAMetaverseTradeAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MetaverseTradeAction) IsAMetaverseTradeAction() bool {
	for _, v := range _MetaverseTradeActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MetaverseTradeAction
func (i MetaverseTradeAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MetaverseTradeAction
func (i *MetaverseTradeAction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MetaverseTradeAction should be a string, got %s", data)
	}

	var err error
	*i, err = MetaverseTradeActionString(s)
	return err
}

func (i MetaverseTradeAction) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *MetaverseTradeAction) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of MetaverseTradeAction: %[1]T(%[1]v)", value)
	}

	val, err := MetaverseTradeActionString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
