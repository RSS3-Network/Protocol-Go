// Code generated by "enumer --values --type=SocialProfileAction --transform=snake --trimprefix=ActionSocialProfile --output social_profile.go --json --sql"; DO NOT EDIT.

package metadata

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _SocialProfileActionName = "createupdaterenewwrapunwrap"

var _SocialProfileActionIndex = [...]uint8{0, 6, 12, 17, 21, 27}

const _SocialProfileActionLowerName = "createupdaterenewwrapunwrap"

func (i SocialProfileAction) String() string {
	i -= 1
	if i >= SocialProfileAction(len(_SocialProfileActionIndex)-1) {
		return fmt.Sprintf("SocialProfileAction(%d)", i+1)
	}
	return _SocialProfileActionName[_SocialProfileActionIndex[i]:_SocialProfileActionIndex[i+1]]
}

func (SocialProfileAction) Values() []string {
	return SocialProfileActionStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SocialProfileActionNoOp() {
	var x [1]struct{}
	_ = x[ActionSocialProfileCreate-(1)]
	_ = x[ActionSocialProfileUpdate-(2)]
	_ = x[ActionSocialProfileRenew-(3)]
	_ = x[ActionSocialProfileWrap-(4)]
	_ = x[ActionSocialProfileUnwrap-(5)]
}

var _SocialProfileActionValues = []SocialProfileAction{ActionSocialProfileCreate, ActionSocialProfileUpdate, ActionSocialProfileRenew, ActionSocialProfileWrap, ActionSocialProfileUnwrap}

var _SocialProfileActionNameToValueMap = map[string]SocialProfileAction{
	_SocialProfileActionName[0:6]:        ActionSocialProfileCreate,
	_SocialProfileActionLowerName[0:6]:   ActionSocialProfileCreate,
	_SocialProfileActionName[6:12]:       ActionSocialProfileUpdate,
	_SocialProfileActionLowerName[6:12]:  ActionSocialProfileUpdate,
	_SocialProfileActionName[12:17]:      ActionSocialProfileRenew,
	_SocialProfileActionLowerName[12:17]: ActionSocialProfileRenew,
	_SocialProfileActionName[17:21]:      ActionSocialProfileWrap,
	_SocialProfileActionLowerName[17:21]: ActionSocialProfileWrap,
	_SocialProfileActionName[21:27]:      ActionSocialProfileUnwrap,
	_SocialProfileActionLowerName[21:27]: ActionSocialProfileUnwrap,
}

var _SocialProfileActionNames = []string{
	_SocialProfileActionName[0:6],
	_SocialProfileActionName[6:12],
	_SocialProfileActionName[12:17],
	_SocialProfileActionName[17:21],
	_SocialProfileActionName[21:27],
}

// SocialProfileActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SocialProfileActionString(s string) (SocialProfileAction, error) {
	if val, ok := _SocialProfileActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SocialProfileActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SocialProfileAction values", s)
}

// SocialProfileActionValues returns all values of the enum
func SocialProfileActionValues() []SocialProfileAction {
	return _SocialProfileActionValues
}

// SocialProfileActionStrings returns a slice of all String values of the enum
func SocialProfileActionStrings() []string {
	strs := make([]string, len(_SocialProfileActionNames))
	copy(strs, _SocialProfileActionNames)
	return strs
}

// IsASocialProfileAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SocialProfileAction) IsASocialProfileAction() bool {
	for _, v := range _SocialProfileActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SocialProfileAction
func (i SocialProfileAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SocialProfileAction
func (i *SocialProfileAction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SocialProfileAction should be a string, got %s", data)
	}

	var err error
	*i, err = SocialProfileActionString(s)
	return err
}

func (i SocialProfileAction) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *SocialProfileAction) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of SocialProfileAction: %[1]T(%[1]v)", value)
	}

	val, err := SocialProfileActionString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
