// Code generated by "enumer --values --type=TransactionApprovalAction --transform=snake --trimprefix=ActionTransaction --output transaction_approval.go --json --sql"; DO NOT EDIT.

package metadata

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _TransactionApprovalActionName = "approverevoke"

var _TransactionApprovalActionIndex = [...]uint8{0, 7, 13}

const _TransactionApprovalActionLowerName = "approverevoke"

func (i TransactionApprovalAction) String() string {
	i -= 1
	if i >= TransactionApprovalAction(len(_TransactionApprovalActionIndex)-1) {
		return fmt.Sprintf("TransactionApprovalAction(%d)", i+1)
	}
	return _TransactionApprovalActionName[_TransactionApprovalActionIndex[i]:_TransactionApprovalActionIndex[i+1]]
}

func (TransactionApprovalAction) Values() []string {
	return TransactionApprovalActionStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TransactionApprovalActionNoOp() {
	var x [1]struct{}
	_ = x[ActionTransactionApprove-(1)]
	_ = x[ActionTransactionRevoke-(2)]
}

var _TransactionApprovalActionValues = []TransactionApprovalAction{ActionTransactionApprove, ActionTransactionRevoke}

var _TransactionApprovalActionNameToValueMap = map[string]TransactionApprovalAction{
	_TransactionApprovalActionName[0:7]:       ActionTransactionApprove,
	_TransactionApprovalActionLowerName[0:7]:  ActionTransactionApprove,
	_TransactionApprovalActionName[7:13]:      ActionTransactionRevoke,
	_TransactionApprovalActionLowerName[7:13]: ActionTransactionRevoke,
}

var _TransactionApprovalActionNames = []string{
	_TransactionApprovalActionName[0:7],
	_TransactionApprovalActionName[7:13],
}

// TransactionApprovalActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TransactionApprovalActionString(s string) (TransactionApprovalAction, error) {
	if val, ok := _TransactionApprovalActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TransactionApprovalActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TransactionApprovalAction values", s)
}

// TransactionApprovalActionValues returns all values of the enum
func TransactionApprovalActionValues() []TransactionApprovalAction {
	return _TransactionApprovalActionValues
}

// TransactionApprovalActionStrings returns a slice of all String values of the enum
func TransactionApprovalActionStrings() []string {
	strs := make([]string, len(_TransactionApprovalActionNames))
	copy(strs, _TransactionApprovalActionNames)
	return strs
}

// IsATransactionApprovalAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TransactionApprovalAction) IsATransactionApprovalAction() bool {
	for _, v := range _TransactionApprovalActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TransactionApprovalAction
func (i TransactionApprovalAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TransactionApprovalAction
func (i *TransactionApprovalAction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TransactionApprovalAction should be a string, got %s", data)
	}

	var err error
	*i, err = TransactionApprovalActionString(s)
	return err
}

func (i TransactionApprovalAction) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *TransactionApprovalAction) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of TransactionApprovalAction: %[1]T(%[1]v)", value)
	}

	val, err := TransactionApprovalActionString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
