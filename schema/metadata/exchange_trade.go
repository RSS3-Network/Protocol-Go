// Code generated by "enumer --values --type=ExchangeTradeAction --transform=snake --trimprefix=ActionExchangeTrade --output exchange_trade.go --json --sql"; DO NOT EDIT.

package metadata

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _ExchangeTradeActionName = "finalizedmatched"

var _ExchangeTradeActionIndex = [...]uint8{0, 9, 16}

const _ExchangeTradeActionLowerName = "finalizedmatched"

func (i ExchangeTradeAction) String() string {
	i -= 1
	if i >= ExchangeTradeAction(len(_ExchangeTradeActionIndex)-1) {
		return fmt.Sprintf("ExchangeTradeAction(%d)", i+1)
	}
	return _ExchangeTradeActionName[_ExchangeTradeActionIndex[i]:_ExchangeTradeActionIndex[i+1]]
}

func (ExchangeTradeAction) Values() []string {
	return ExchangeTradeActionStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ExchangeTradeActionNoOp() {
	var x [1]struct{}
	_ = x[ActionExchangeTradeFinalized-(1)]
	_ = x[ActionExchangeTradeMatched-(2)]
}

var _ExchangeTradeActionValues = []ExchangeTradeAction{ActionExchangeTradeFinalized, ActionExchangeTradeMatched}

var _ExchangeTradeActionNameToValueMap = map[string]ExchangeTradeAction{
	_ExchangeTradeActionName[0:9]:       ActionExchangeTradeFinalized,
	_ExchangeTradeActionLowerName[0:9]:  ActionExchangeTradeFinalized,
	_ExchangeTradeActionName[9:16]:      ActionExchangeTradeMatched,
	_ExchangeTradeActionLowerName[9:16]: ActionExchangeTradeMatched,
}

var _ExchangeTradeActionNames = []string{
	_ExchangeTradeActionName[0:9],
	_ExchangeTradeActionName[9:16],
}

// ExchangeTradeActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ExchangeTradeActionString(s string) (ExchangeTradeAction, error) {
	if val, ok := _ExchangeTradeActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ExchangeTradeActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ExchangeTradeAction values", s)
}

// ExchangeTradeActionValues returns all values of the enum
func ExchangeTradeActionValues() []ExchangeTradeAction {
	return _ExchangeTradeActionValues
}

// ExchangeTradeActionStrings returns a slice of all String values of the enum
func ExchangeTradeActionStrings() []string {
	strs := make([]string, len(_ExchangeTradeActionNames))
	copy(strs, _ExchangeTradeActionNames)
	return strs
}

// IsAExchangeTradeAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ExchangeTradeAction) IsAExchangeTradeAction() bool {
	for _, v := range _ExchangeTradeActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ExchangeTradeAction
func (i ExchangeTradeAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ExchangeTradeAction
func (i *ExchangeTradeAction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ExchangeTradeAction should be a string, got %s", data)
	}

	var err error
	*i, err = ExchangeTradeActionString(s)
	return err
}

func (i ExchangeTradeAction) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *ExchangeTradeAction) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of ExchangeTradeAction: %[1]T(%[1]v)", value)
	}

	val, err := ExchangeTradeActionString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
