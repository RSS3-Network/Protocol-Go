// Code generated by "enumer --values --type=TransactionBridgeAction --transform=snake --trimprefix=ActionTransactionBridge --output transaction_bridge.go --json --sql"; DO NOT EDIT.

package metadata

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _TransactionBridgeActionName = "withdrawdeposit"

var _TransactionBridgeActionIndex = [...]uint8{0, 8, 15}

const _TransactionBridgeActionLowerName = "withdrawdeposit"

func (i TransactionBridgeAction) String() string {
	i -= 1
	if i >= TransactionBridgeAction(len(_TransactionBridgeActionIndex)-1) {
		return fmt.Sprintf("TransactionBridgeAction(%d)", i+1)
	}
	return _TransactionBridgeActionName[_TransactionBridgeActionIndex[i]:_TransactionBridgeActionIndex[i+1]]
}

func (TransactionBridgeAction) Values() []string {
	return TransactionBridgeActionStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TransactionBridgeActionNoOp() {
	var x [1]struct{}
	_ = x[ActionTransactionBridgeWithdraw-(1)]
	_ = x[ActionTransactionBridgeDeposit-(2)]
}

var _TransactionBridgeActionValues = []TransactionBridgeAction{ActionTransactionBridgeWithdraw, ActionTransactionBridgeDeposit}

var _TransactionBridgeActionNameToValueMap = map[string]TransactionBridgeAction{
	_TransactionBridgeActionName[0:8]:       ActionTransactionBridgeWithdraw,
	_TransactionBridgeActionLowerName[0:8]:  ActionTransactionBridgeWithdraw,
	_TransactionBridgeActionName[8:15]:      ActionTransactionBridgeDeposit,
	_TransactionBridgeActionLowerName[8:15]: ActionTransactionBridgeDeposit,
}

var _TransactionBridgeActionNames = []string{
	_TransactionBridgeActionName[0:8],
	_TransactionBridgeActionName[8:15],
}

// TransactionBridgeActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TransactionBridgeActionString(s string) (TransactionBridgeAction, error) {
	if val, ok := _TransactionBridgeActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TransactionBridgeActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TransactionBridgeAction values", s)
}

// TransactionBridgeActionValues returns all values of the enum
func TransactionBridgeActionValues() []TransactionBridgeAction {
	return _TransactionBridgeActionValues
}

// TransactionBridgeActionStrings returns a slice of all String values of the enum
func TransactionBridgeActionStrings() []string {
	strs := make([]string, len(_TransactionBridgeActionNames))
	copy(strs, _TransactionBridgeActionNames)
	return strs
}

// IsATransactionBridgeAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TransactionBridgeAction) IsATransactionBridgeAction() bool {
	for _, v := range _TransactionBridgeActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TransactionBridgeAction
func (i TransactionBridgeAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TransactionBridgeAction
func (i *TransactionBridgeAction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TransactionBridgeAction should be a string, got %s", data)
	}

	var err error
	*i, err = TransactionBridgeActionString(s)
	return err
}

func (i TransactionBridgeAction) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *TransactionBridgeAction) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of TransactionBridgeAction: %[1]T(%[1]v)", value)
	}

	val, err := TransactionBridgeActionString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
