// Code generated by "enumer --values --type=ExchangeStakingAction --transform=snake --trimprefix=ActionExchangeStaking --output exchange_staking.go --json --sql"; DO NOT EDIT.

package metadata

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _ExchangeStakingActionName = "stakeunstakeclaim"

var _ExchangeStakingActionIndex = [...]uint8{0, 5, 12, 17}

const _ExchangeStakingActionLowerName = "stakeunstakeclaim"

func (i ExchangeStakingAction) String() string {
	i -= 1
	if i >= ExchangeStakingAction(len(_ExchangeStakingActionIndex)-1) {
		return fmt.Sprintf("ExchangeStakingAction(%d)", i+1)
	}
	return _ExchangeStakingActionName[_ExchangeStakingActionIndex[i]:_ExchangeStakingActionIndex[i+1]]
}

func (ExchangeStakingAction) Values() []string {
	return ExchangeStakingActionStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ExchangeStakingActionNoOp() {
	var x [1]struct{}
	_ = x[ActionExchangeStakingStake-(1)]
	_ = x[ActionExchangeStakingUnstake-(2)]
	_ = x[ActionExchangeStakingClaim-(3)]
}

var _ExchangeStakingActionValues = []ExchangeStakingAction{ActionExchangeStakingStake, ActionExchangeStakingUnstake, ActionExchangeStakingClaim}

var _ExchangeStakingActionNameToValueMap = map[string]ExchangeStakingAction{
	_ExchangeStakingActionName[0:5]:        ActionExchangeStakingStake,
	_ExchangeStakingActionLowerName[0:5]:   ActionExchangeStakingStake,
	_ExchangeStakingActionName[5:12]:       ActionExchangeStakingUnstake,
	_ExchangeStakingActionLowerName[5:12]:  ActionExchangeStakingUnstake,
	_ExchangeStakingActionName[12:17]:      ActionExchangeStakingClaim,
	_ExchangeStakingActionLowerName[12:17]: ActionExchangeStakingClaim,
}

var _ExchangeStakingActionNames = []string{
	_ExchangeStakingActionName[0:5],
	_ExchangeStakingActionName[5:12],
	_ExchangeStakingActionName[12:17],
}

// ExchangeStakingActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ExchangeStakingActionString(s string) (ExchangeStakingAction, error) {
	if val, ok := _ExchangeStakingActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ExchangeStakingActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ExchangeStakingAction values", s)
}

// ExchangeStakingActionValues returns all values of the enum
func ExchangeStakingActionValues() []ExchangeStakingAction {
	return _ExchangeStakingActionValues
}

// ExchangeStakingActionStrings returns a slice of all String values of the enum
func ExchangeStakingActionStrings() []string {
	strs := make([]string, len(_ExchangeStakingActionNames))
	copy(strs, _ExchangeStakingActionNames)
	return strs
}

// IsAExchangeStakingAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ExchangeStakingAction) IsAExchangeStakingAction() bool {
	for _, v := range _ExchangeStakingActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ExchangeStakingAction
func (i ExchangeStakingAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ExchangeStakingAction
func (i *ExchangeStakingAction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ExchangeStakingAction should be a string, got %s", data)
	}

	var err error
	*i, err = ExchangeStakingActionString(s)
	return err
}

func (i ExchangeStakingAction) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *ExchangeStakingAction) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of ExchangeStakingAction: %[1]T(%[1]v)", value)
	}

	val, err := ExchangeStakingActionString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
