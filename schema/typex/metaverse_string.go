// Code generated by "enumer --values --type=MetaverseType --transform=snake --trimprefix=Metaverse --output metaverse_string.go --json --sql"; DO NOT EDIT.

package typex

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _MetaverseTypeName = "burnminttradetransfer"

var _MetaverseTypeIndex = [...]uint8{0, 4, 8, 13, 21}

const _MetaverseTypeLowerName = "burnminttradetransfer"

func (i MetaverseType) String() string {
	i -= 1
	if i >= MetaverseType(len(_MetaverseTypeIndex)-1) {
		return fmt.Sprintf("MetaverseType(%d)", i+1)
	}
	return _MetaverseTypeName[_MetaverseTypeIndex[i]:_MetaverseTypeIndex[i+1]]
}

func (MetaverseType) Values() []string {
	return MetaverseTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MetaverseTypeNoOp() {
	var x [1]struct{}
	_ = x[MetaverseBurn-(1)]
	_ = x[MetaverseMint-(2)]
	_ = x[MetaverseTrade-(3)]
	_ = x[MetaverseTransfer-(4)]
}

var _MetaverseTypeValues = []MetaverseType{MetaverseBurn, MetaverseMint, MetaverseTrade, MetaverseTransfer}

var _MetaverseTypeNameToValueMap = map[string]MetaverseType{
	_MetaverseTypeName[0:4]:        MetaverseBurn,
	_MetaverseTypeLowerName[0:4]:   MetaverseBurn,
	_MetaverseTypeName[4:8]:        MetaverseMint,
	_MetaverseTypeLowerName[4:8]:   MetaverseMint,
	_MetaverseTypeName[8:13]:       MetaverseTrade,
	_MetaverseTypeLowerName[8:13]:  MetaverseTrade,
	_MetaverseTypeName[13:21]:      MetaverseTransfer,
	_MetaverseTypeLowerName[13:21]: MetaverseTransfer,
}

var _MetaverseTypeNames = []string{
	_MetaverseTypeName[0:4],
	_MetaverseTypeName[4:8],
	_MetaverseTypeName[8:13],
	_MetaverseTypeName[13:21],
}

// MetaverseTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MetaverseTypeString(s string) (MetaverseType, error) {
	if val, ok := _MetaverseTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MetaverseTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MetaverseType values", s)
}

// MetaverseTypeValues returns all values of the enum
func MetaverseTypeValues() []MetaverseType {
	return _MetaverseTypeValues
}

// MetaverseTypeStrings returns a slice of all String values of the enum
func MetaverseTypeStrings() []string {
	strs := make([]string, len(_MetaverseTypeNames))
	copy(strs, _MetaverseTypeNames)
	return strs
}

// IsAMetaverseType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MetaverseType) IsAMetaverseType() bool {
	for _, v := range _MetaverseTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MetaverseType
func (i MetaverseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MetaverseType
func (i *MetaverseType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MetaverseType should be a string, got %s", data)
	}

	var err error
	*i, err = MetaverseTypeString(s)
	return err
}

func (i MetaverseType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *MetaverseType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of MetaverseType: %[1]T(%[1]v)", value)
	}

	val, err := MetaverseTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
