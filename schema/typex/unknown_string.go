// Code generated by "enumer --values --type=UnknownType --transform=snake --trimprefix=Type --output unknown_string.go --json --sql"; DO NOT EDIT.

package typex

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _UnknownTypeName = "unknown"

var _UnknownTypeIndex = [...]uint8{0, 7}

const _UnknownTypeLowerName = "unknown"

func (i UnknownType) String() string {
	if i >= UnknownType(len(_UnknownTypeIndex)-1) {
		return fmt.Sprintf("UnknownType(%d)", i)
	}
	return _UnknownTypeName[_UnknownTypeIndex[i]:_UnknownTypeIndex[i+1]]
}

func (UnknownType) Values() []string {
	return UnknownTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _UnknownTypeNoOp() {
	var x [1]struct{}
	_ = x[Unknown-(0)]
}

var _UnknownTypeValues = []UnknownType{Unknown}

var _UnknownTypeNameToValueMap = map[string]UnknownType{
	_UnknownTypeName[0:7]:      Unknown,
	_UnknownTypeLowerName[0:7]: Unknown,
}

var _UnknownTypeNames = []string{
	_UnknownTypeName[0:7],
}

// UnknownTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func UnknownTypeString(s string) (UnknownType, error) {
	if val, ok := _UnknownTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _UnknownTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to UnknownType values", s)
}

// UnknownTypeValues returns all values of the enum
func UnknownTypeValues() []UnknownType {
	return _UnknownTypeValues
}

// UnknownTypeStrings returns a slice of all String values of the enum
func UnknownTypeStrings() []string {
	strs := make([]string, len(_UnknownTypeNames))
	copy(strs, _UnknownTypeNames)
	return strs
}

// IsAUnknownType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i UnknownType) IsAUnknownType() bool {
	for _, v := range _UnknownTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for UnknownType
func (i UnknownType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for UnknownType
func (i *UnknownType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("UnknownType should be a string, got %s", data)
	}

	var err error
	*i, err = UnknownTypeString(s)
	return err
}

func (i UnknownType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *UnknownType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of UnknownType: %[1]T(%[1]v)", value)
	}

	val, err := UnknownTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
