// Code generated by "enumer --values --type=Worker --linecomment --output worker_string.go --json --yaml --sql"; DO NOT EDIT.

package filter

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _WorkerName = "unknownaaveaavegotchicrossbellcurveensfarcasterfoundationhighlightiqwikikiwistandlenslidolooksraremattersmirrormomoka1inchopenseaoptimismparagraphrss3savmstargateuniswapvsl"

var _WorkerIndex = [...]uint8{0, 7, 11, 21, 30, 35, 38, 47, 57, 66, 72, 81, 85, 89, 98, 105, 111, 117, 122, 129, 137, 146, 150, 154, 162, 169, 172}

const _WorkerLowerName = "unknownaaveaavegotchicrossbellcurveensfarcasterfoundationhighlightiqwikikiwistandlenslidolooksraremattersmirrormomoka1inchopenseaoptimismparagraphrss3savmstargateuniswapvsl"

func (i Worker) String() string {
	if i >= Worker(len(_WorkerIndex)-1) {
		return fmt.Sprintf("Worker(%d)", i)
	}
	return _WorkerName[_WorkerIndex[i]:_WorkerIndex[i+1]]
}

func (Worker) Values() []string {
	return WorkerStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _WorkerNoOp() {
	var x [1]struct{}
	_ = x[Unknown-(0)]
	_ = x[Aave-(1)]
	_ = x[Aavegotchi-(2)]
	_ = x[Crossbell-(3)]
	_ = x[Curve-(4)]
	_ = x[ENS-(5)]
	_ = x[Farcaster-(6)]
	_ = x[Foundation-(7)]
	_ = x[Highlight-(8)]
	_ = x[IQWiki-(9)]
	_ = x[KiwiStand-(10)]
	_ = x[Lens-(11)]
	_ = x[Lido-(12)]
	_ = x[Looksrare-(13)]
	_ = x[Matters-(14)]
	_ = x[Mirror-(15)]
	_ = x[Momoka-(16)]
	_ = x[Oneinch-(17)]
	_ = x[OpenSea-(18)]
	_ = x[Optimism-(19)]
	_ = x[Paragraph-(20)]
	_ = x[RSS3-(21)]
	_ = x[SAVM-(22)]
	_ = x[Stargate-(23)]
	_ = x[Uniswap-(24)]
	_ = x[VSL-(25)]
}

var _WorkerValues = []Worker{Unknown, Aave, Aavegotchi, Crossbell, Curve, ENS, Farcaster, Foundation, Highlight, IQWiki, KiwiStand, Lens, Lido, Looksrare, Matters, Mirror, Momoka, Oneinch, OpenSea, Optimism, Paragraph, RSS3, SAVM, Stargate, Uniswap, VSL}

var _WorkerNameToValueMap = map[string]Worker{
	_WorkerName[0:7]:          Unknown,
	_WorkerLowerName[0:7]:     Unknown,
	_WorkerName[7:11]:         Aave,
	_WorkerLowerName[7:11]:    Aave,
	_WorkerName[11:21]:        Aavegotchi,
	_WorkerLowerName[11:21]:   Aavegotchi,
	_WorkerName[21:30]:        Crossbell,
	_WorkerLowerName[21:30]:   Crossbell,
	_WorkerName[30:35]:        Curve,
	_WorkerLowerName[30:35]:   Curve,
	_WorkerName[35:38]:        ENS,
	_WorkerLowerName[35:38]:   ENS,
	_WorkerName[38:47]:        Farcaster,
	_WorkerLowerName[38:47]:   Farcaster,
	_WorkerName[47:57]:        Foundation,
	_WorkerLowerName[47:57]:   Foundation,
	_WorkerName[57:66]:        Highlight,
	_WorkerLowerName[57:66]:   Highlight,
	_WorkerName[66:72]:        IQWiki,
	_WorkerLowerName[66:72]:   IQWiki,
	_WorkerName[72:81]:        KiwiStand,
	_WorkerLowerName[72:81]:   KiwiStand,
	_WorkerName[81:85]:        Lens,
	_WorkerLowerName[81:85]:   Lens,
	_WorkerName[85:89]:        Lido,
	_WorkerLowerName[85:89]:   Lido,
	_WorkerName[89:98]:        Looksrare,
	_WorkerLowerName[89:98]:   Looksrare,
	_WorkerName[98:105]:       Matters,
	_WorkerLowerName[98:105]:  Matters,
	_WorkerName[105:111]:      Mirror,
	_WorkerLowerName[105:111]: Mirror,
	_WorkerName[111:117]:      Momoka,
	_WorkerLowerName[111:117]: Momoka,
	_WorkerName[117:122]:      Oneinch,
	_WorkerLowerName[117:122]: Oneinch,
	_WorkerName[122:129]:      OpenSea,
	_WorkerLowerName[122:129]: OpenSea,
	_WorkerName[129:137]:      Optimism,
	_WorkerLowerName[129:137]: Optimism,
	_WorkerName[137:146]:      Paragraph,
	_WorkerLowerName[137:146]: Paragraph,
	_WorkerName[146:150]:      RSS3,
	_WorkerLowerName[146:150]: RSS3,
	_WorkerName[150:154]:      SAVM,
	_WorkerLowerName[150:154]: SAVM,
	_WorkerName[154:162]:      Stargate,
	_WorkerLowerName[154:162]: Stargate,
	_WorkerName[162:169]:      Uniswap,
	_WorkerLowerName[162:169]: Uniswap,
	_WorkerName[169:172]:      VSL,
	_WorkerLowerName[169:172]: VSL,
}

var _WorkerNames = []string{
	_WorkerName[0:7],
	_WorkerName[7:11],
	_WorkerName[11:21],
	_WorkerName[21:30],
	_WorkerName[30:35],
	_WorkerName[35:38],
	_WorkerName[38:47],
	_WorkerName[47:57],
	_WorkerName[57:66],
	_WorkerName[66:72],
	_WorkerName[72:81],
	_WorkerName[81:85],
	_WorkerName[85:89],
	_WorkerName[89:98],
	_WorkerName[98:105],
	_WorkerName[105:111],
	_WorkerName[111:117],
	_WorkerName[117:122],
	_WorkerName[122:129],
	_WorkerName[129:137],
	_WorkerName[137:146],
	_WorkerName[146:150],
	_WorkerName[150:154],
	_WorkerName[154:162],
	_WorkerName[162:169],
	_WorkerName[169:172],
}

// WorkerString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func WorkerString(s string) (Worker, error) {
	if val, ok := _WorkerNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _WorkerNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Worker values", s)
}

// WorkerValues returns all values of the enum
func WorkerValues() []Worker {
	return _WorkerValues
}

// WorkerStrings returns a slice of all String values of the enum
func WorkerStrings() []string {
	strs := make([]string, len(_WorkerNames))
	copy(strs, _WorkerNames)
	return strs
}

// IsAWorker returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Worker) IsAWorker() bool {
	for _, v := range _WorkerValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Worker
func (i Worker) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Worker
func (i *Worker) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Worker should be a string, got %s", data)
	}

	var err error
	*i, err = WorkerString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for Worker
func (i Worker) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Worker
func (i *Worker) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = WorkerString(s)
	return err
}

func (i Worker) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Worker) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Worker: %[1]T(%[1]v)", value)
	}

	val, err := WorkerString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
