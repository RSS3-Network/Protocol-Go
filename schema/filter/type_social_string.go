// Code generated by "enumer --values --type=SocialType --transform=snake --trimprefix=TypeSocial --output type_social_string.go --json --sql"; DO NOT EDIT.

package filter

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _SocialTypeName = "commentdeletemintpostprofileproxyreviserewardshare"

var _SocialTypeIndex = [...]uint8{0, 7, 13, 17, 21, 28, 33, 39, 45, 50}

const _SocialTypeLowerName = "commentdeletemintpostprofileproxyreviserewardshare"

func (i SocialType) String() string {
	i -= 1
	if i >= SocialType(len(_SocialTypeIndex)-1) {
		return fmt.Sprintf("SocialType(%d)", i+1)
	}
	return _SocialTypeName[_SocialTypeIndex[i]:_SocialTypeIndex[i+1]]
}

func (SocialType) Values() []string {
	return SocialTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SocialTypeNoOp() {
	var x [1]struct{}
	_ = x[TypeSocialComment-(1)]
	_ = x[TypeSocialDelete-(2)]
	_ = x[TypeSocialMint-(3)]
	_ = x[TypeSocialPost-(4)]
	_ = x[TypeSocialProfile-(5)]
	_ = x[TypeSocialProxy-(6)]
	_ = x[TypeSocialRevise-(7)]
	_ = x[TypeSocialReward-(8)]
	_ = x[TypeSocialShare-(9)]
}

var _SocialTypeValues = []SocialType{TypeSocialComment, TypeSocialDelete, TypeSocialMint, TypeSocialPost, TypeSocialProfile, TypeSocialProxy, TypeSocialRevise, TypeSocialReward, TypeSocialShare}

var _SocialTypeNameToValueMap = map[string]SocialType{
	_SocialTypeName[0:7]:        TypeSocialComment,
	_SocialTypeLowerName[0:7]:   TypeSocialComment,
	_SocialTypeName[7:13]:       TypeSocialDelete,
	_SocialTypeLowerName[7:13]:  TypeSocialDelete,
	_SocialTypeName[13:17]:      TypeSocialMint,
	_SocialTypeLowerName[13:17]: TypeSocialMint,
	_SocialTypeName[17:21]:      TypeSocialPost,
	_SocialTypeLowerName[17:21]: TypeSocialPost,
	_SocialTypeName[21:28]:      TypeSocialProfile,
	_SocialTypeLowerName[21:28]: TypeSocialProfile,
	_SocialTypeName[28:33]:      TypeSocialProxy,
	_SocialTypeLowerName[28:33]: TypeSocialProxy,
	_SocialTypeName[33:39]:      TypeSocialRevise,
	_SocialTypeLowerName[33:39]: TypeSocialRevise,
	_SocialTypeName[39:45]:      TypeSocialReward,
	_SocialTypeLowerName[39:45]: TypeSocialReward,
	_SocialTypeName[45:50]:      TypeSocialShare,
	_SocialTypeLowerName[45:50]: TypeSocialShare,
}

var _SocialTypeNames = []string{
	_SocialTypeName[0:7],
	_SocialTypeName[7:13],
	_SocialTypeName[13:17],
	_SocialTypeName[17:21],
	_SocialTypeName[21:28],
	_SocialTypeName[28:33],
	_SocialTypeName[33:39],
	_SocialTypeName[39:45],
	_SocialTypeName[45:50],
}

// SocialTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SocialTypeString(s string) (SocialType, error) {
	if val, ok := _SocialTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SocialTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SocialType values", s)
}

// SocialTypeValues returns all values of the enum
func SocialTypeValues() []SocialType {
	return _SocialTypeValues
}

// SocialTypeStrings returns a slice of all String values of the enum
func SocialTypeStrings() []string {
	strs := make([]string, len(_SocialTypeNames))
	copy(strs, _SocialTypeNames)
	return strs
}

// IsASocialType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SocialType) IsASocialType() bool {
	for _, v := range _SocialTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SocialType
func (i SocialType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SocialType
func (i *SocialType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SocialType should be a string, got %s", data)
	}

	var err error
	*i, err = SocialTypeString(s)
	return err
}

func (i SocialType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *SocialType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of SocialType: %[1]T(%[1]v)", value)
	}

	val, err := SocialTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
