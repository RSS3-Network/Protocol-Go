// Code generated by "enumer --values --type=Platform --linecomment --output platform_string.go --json --sql"; DO NOT EDIT.

package filter

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _PlatformName = "1inchAAVEAavegotchiCrossbellCurveENSFarcasterHighlightIQWikiKiwiStandLensLidoLooksRareMattersMirrorMomokaOpenSeaOptimismParagraphRSS3SAVMStargateUniswapVSL"

var _PlatformIndex = [...]uint8{0, 5, 9, 19, 28, 33, 36, 45, 54, 60, 69, 73, 77, 86, 93, 99, 105, 112, 120, 129, 133, 137, 145, 152, 155}

const _PlatformLowerName = "1inchaaveaavegotchicrossbellcurveensfarcasterhighlightiqwikikiwistandlenslidolooksraremattersmirrormomokaopenseaoptimismparagraphrss3savmstargateuniswapvsl"

func (i Platform) String() string {
	i -= 1
	if i < 0 || i >= Platform(len(_PlatformIndex)-1) {
		return fmt.Sprintf("Platform(%d)", i+1)
	}
	return _PlatformName[_PlatformIndex[i]:_PlatformIndex[i+1]]
}

func (Platform) Values() []string {
	return PlatformStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PlatformNoOp() {
	var x [1]struct{}
	_ = x[Platform1inch-(1)]
	_ = x[PlatformAAVE-(2)]
	_ = x[PlatformAavegotchi-(3)]
	_ = x[PlatformCrossbell-(4)]
	_ = x[PlatformCurve-(5)]
	_ = x[PlatformENS-(6)]
	_ = x[PlatformFarcaster-(7)]
	_ = x[PlatformHighlight-(8)]
	_ = x[PlatformIQWiki-(9)]
	_ = x[PlatformKiwiStand-(10)]
	_ = x[PlatformLens-(11)]
	_ = x[PlatformLido-(12)]
	_ = x[PlatformLooksRare-(13)]
	_ = x[PlatformMatters-(14)]
	_ = x[PlatformMirror-(15)]
	_ = x[PlatformMomoka-(16)]
	_ = x[PlatformOpenSea-(17)]
	_ = x[PlatformOptimism-(18)]
	_ = x[PlatformParagraph-(19)]
	_ = x[PlatformRSS3-(20)]
	_ = x[PlatformSAVM-(21)]
	_ = x[PlatformStargate-(22)]
	_ = x[PlatformUniswap-(23)]
	_ = x[PlatformVSL-(24)]
}

var _PlatformValues = []Platform{Platform1inch, PlatformAAVE, PlatformAavegotchi, PlatformCrossbell, PlatformCurve, PlatformENS, PlatformFarcaster, PlatformHighlight, PlatformIQWiki, PlatformKiwiStand, PlatformLens, PlatformLido, PlatformLooksRare, PlatformMatters, PlatformMirror, PlatformMomoka, PlatformOpenSea, PlatformOptimism, PlatformParagraph, PlatformRSS3, PlatformSAVM, PlatformStargate, PlatformUniswap, PlatformVSL}

var _PlatformNameToValueMap = map[string]Platform{
	_PlatformName[0:5]:          Platform1inch,
	_PlatformLowerName[0:5]:     Platform1inch,
	_PlatformName[5:9]:          PlatformAAVE,
	_PlatformLowerName[5:9]:     PlatformAAVE,
	_PlatformName[9:19]:         PlatformAavegotchi,
	_PlatformLowerName[9:19]:    PlatformAavegotchi,
	_PlatformName[19:28]:        PlatformCrossbell,
	_PlatformLowerName[19:28]:   PlatformCrossbell,
	_PlatformName[28:33]:        PlatformCurve,
	_PlatformLowerName[28:33]:   PlatformCurve,
	_PlatformName[33:36]:        PlatformENS,
	_PlatformLowerName[33:36]:   PlatformENS,
	_PlatformName[36:45]:        PlatformFarcaster,
	_PlatformLowerName[36:45]:   PlatformFarcaster,
	_PlatformName[45:54]:        PlatformHighlight,
	_PlatformLowerName[45:54]:   PlatformHighlight,
	_PlatformName[54:60]:        PlatformIQWiki,
	_PlatformLowerName[54:60]:   PlatformIQWiki,
	_PlatformName[60:69]:        PlatformKiwiStand,
	_PlatformLowerName[60:69]:   PlatformKiwiStand,
	_PlatformName[69:73]:        PlatformLens,
	_PlatformLowerName[69:73]:   PlatformLens,
	_PlatformName[73:77]:        PlatformLido,
	_PlatformLowerName[73:77]:   PlatformLido,
	_PlatformName[77:86]:        PlatformLooksRare,
	_PlatformLowerName[77:86]:   PlatformLooksRare,
	_PlatformName[86:93]:        PlatformMatters,
	_PlatformLowerName[86:93]:   PlatformMatters,
	_PlatformName[93:99]:        PlatformMirror,
	_PlatformLowerName[93:99]:   PlatformMirror,
	_PlatformName[99:105]:       PlatformMomoka,
	_PlatformLowerName[99:105]:  PlatformMomoka,
	_PlatformName[105:112]:      PlatformOpenSea,
	_PlatformLowerName[105:112]: PlatformOpenSea,
	_PlatformName[112:120]:      PlatformOptimism,
	_PlatformLowerName[112:120]: PlatformOptimism,
	_PlatformName[120:129]:      PlatformParagraph,
	_PlatformLowerName[120:129]: PlatformParagraph,
	_PlatformName[129:133]:      PlatformRSS3,
	_PlatformLowerName[129:133]: PlatformRSS3,
	_PlatformName[133:137]:      PlatformSAVM,
	_PlatformLowerName[133:137]: PlatformSAVM,
	_PlatformName[137:145]:      PlatformStargate,
	_PlatformLowerName[137:145]: PlatformStargate,
	_PlatformName[145:152]:      PlatformUniswap,
	_PlatformLowerName[145:152]: PlatformUniswap,
	_PlatformName[152:155]:      PlatformVSL,
	_PlatformLowerName[152:155]: PlatformVSL,
}

var _PlatformNames = []string{
	_PlatformName[0:5],
	_PlatformName[5:9],
	_PlatformName[9:19],
	_PlatformName[19:28],
	_PlatformName[28:33],
	_PlatformName[33:36],
	_PlatformName[36:45],
	_PlatformName[45:54],
	_PlatformName[54:60],
	_PlatformName[60:69],
	_PlatformName[69:73],
	_PlatformName[73:77],
	_PlatformName[77:86],
	_PlatformName[86:93],
	_PlatformName[93:99],
	_PlatformName[99:105],
	_PlatformName[105:112],
	_PlatformName[112:120],
	_PlatformName[120:129],
	_PlatformName[129:133],
	_PlatformName[133:137],
	_PlatformName[137:145],
	_PlatformName[145:152],
	_PlatformName[152:155],
}

// PlatformString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PlatformString(s string) (Platform, error) {
	if val, ok := _PlatformNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PlatformNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Platform values", s)
}

// PlatformValues returns all values of the enum
func PlatformValues() []Platform {
	return _PlatformValues
}

// PlatformStrings returns a slice of all String values of the enum
func PlatformStrings() []string {
	strs := make([]string, len(_PlatformNames))
	copy(strs, _PlatformNames)
	return strs
}

// IsAPlatform returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Platform) IsAPlatform() bool {
	for _, v := range _PlatformValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Platform
func (i Platform) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Platform
func (i *Platform) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Platform should be a string, got %s", data)
	}

	var err error
	*i, err = PlatformString(s)
	return err
}

func (i Platform) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Platform) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Platform: %[1]T(%[1]v)", value)
	}

	val, err := PlatformString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
