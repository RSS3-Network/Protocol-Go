// Code generated by "enumer --values --type=EthereumChainID --linecomment --output ethereum_chain_string.go --json --yaml --sql"; DO NOT EDIT.

package filter

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _EthereumChainIDName = "ethereumoptimismpolygonfantomrss3-testnetsavmcrossbellbasevslarbitrumavax"
const _EthereumChainIDLowerName = "ethereumoptimismpolygonfantomrss3-testnetsavmcrossbellbasevslarbitrumavax"

var _EthereumChainIDMap = map[EthereumChainID]string{
	1:     _EthereumChainIDName[0:8],
	10:    _EthereumChainIDName[8:16],
	137:   _EthereumChainIDName[16:23],
	250:   _EthereumChainIDName[23:29],
	2331:  _EthereumChainIDName[29:41],
	3109:  _EthereumChainIDName[41:45],
	3737:  _EthereumChainIDName[45:54],
	8453:  _EthereumChainIDName[54:58],
	12553: _EthereumChainIDName[58:61],
	42161: _EthereumChainIDName[61:69],
	43114: _EthereumChainIDName[69:73],
}

func (i EthereumChainID) String() string {
	if str, ok := _EthereumChainIDMap[i]; ok {
		return str
	}
	return fmt.Sprintf("EthereumChainID(%d)", i)
}

func (EthereumChainID) Values() []string {
	return EthereumChainIDStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _EthereumChainIDNoOp() {
	var x [1]struct{}
	_ = x[EthereumChainIDMainnet-(1)]
	_ = x[EthereumChainIDOptimism-(10)]
	_ = x[EthereumChainIDPolygon-(137)]
	_ = x[EthereumChainIDFantom-(250)]
	_ = x[EthereumChainIDRSS3Testnet-(2331)]
	_ = x[EthereumChainIDSatoshiVM-(3109)]
	_ = x[EthereumChainIDCrossbell-(3737)]
	_ = x[EthereumChainIDBase-(8453)]
	_ = x[EthereumChainIDVSL-(12553)]
	_ = x[EthereumChainIDArbitrum-(42161)]
	_ = x[EthereumChainIDAvalanche-(43114)]
}

var _EthereumChainIDValues = []EthereumChainID{EthereumChainIDMainnet, EthereumChainIDOptimism, EthereumChainIDPolygon, EthereumChainIDFantom, EthereumChainIDRSS3Testnet, EthereumChainIDSatoshiVM, EthereumChainIDCrossbell, EthereumChainIDBase, EthereumChainIDVSL, EthereumChainIDArbitrum, EthereumChainIDAvalanche}

var _EthereumChainIDNameToValueMap = map[string]EthereumChainID{
	_EthereumChainIDName[0:8]:        EthereumChainIDMainnet,
	_EthereumChainIDLowerName[0:8]:   EthereumChainIDMainnet,
	_EthereumChainIDName[8:16]:       EthereumChainIDOptimism,
	_EthereumChainIDLowerName[8:16]:  EthereumChainIDOptimism,
	_EthereumChainIDName[16:23]:      EthereumChainIDPolygon,
	_EthereumChainIDLowerName[16:23]: EthereumChainIDPolygon,
	_EthereumChainIDName[23:29]:      EthereumChainIDFantom,
	_EthereumChainIDLowerName[23:29]: EthereumChainIDFantom,
	_EthereumChainIDName[29:41]:      EthereumChainIDRSS3Testnet,
	_EthereumChainIDLowerName[29:41]: EthereumChainIDRSS3Testnet,
	_EthereumChainIDName[41:45]:      EthereumChainIDSatoshiVM,
	_EthereumChainIDLowerName[41:45]: EthereumChainIDSatoshiVM,
	_EthereumChainIDName[45:54]:      EthereumChainIDCrossbell,
	_EthereumChainIDLowerName[45:54]: EthereumChainIDCrossbell,
	_EthereumChainIDName[54:58]:      EthereumChainIDBase,
	_EthereumChainIDLowerName[54:58]: EthereumChainIDBase,
	_EthereumChainIDName[58:61]:      EthereumChainIDVSL,
	_EthereumChainIDLowerName[58:61]: EthereumChainIDVSL,
	_EthereumChainIDName[61:69]:      EthereumChainIDArbitrum,
	_EthereumChainIDLowerName[61:69]: EthereumChainIDArbitrum,
	_EthereumChainIDName[69:73]:      EthereumChainIDAvalanche,
	_EthereumChainIDLowerName[69:73]: EthereumChainIDAvalanche,
}

var _EthereumChainIDNames = []string{
	_EthereumChainIDName[0:8],
	_EthereumChainIDName[8:16],
	_EthereumChainIDName[16:23],
	_EthereumChainIDName[23:29],
	_EthereumChainIDName[29:41],
	_EthereumChainIDName[41:45],
	_EthereumChainIDName[45:54],
	_EthereumChainIDName[54:58],
	_EthereumChainIDName[58:61],
	_EthereumChainIDName[61:69],
	_EthereumChainIDName[69:73],
}

// EthereumChainIDString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EthereumChainIDString(s string) (EthereumChainID, error) {
	if val, ok := _EthereumChainIDNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _EthereumChainIDNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to EthereumChainID values", s)
}

// EthereumChainIDValues returns all values of the enum
func EthereumChainIDValues() []EthereumChainID {
	return _EthereumChainIDValues
}

// EthereumChainIDStrings returns a slice of all String values of the enum
func EthereumChainIDStrings() []string {
	strs := make([]string, len(_EthereumChainIDNames))
	copy(strs, _EthereumChainIDNames)
	return strs
}

// IsAEthereumChainID returns "true" if the value is listed in the enum definition. "false" otherwise
func (i EthereumChainID) IsAEthereumChainID() bool {
	_, ok := _EthereumChainIDMap[i]
	return ok
}

// MarshalJSON implements the json.Marshaler interface for EthereumChainID
func (i EthereumChainID) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for EthereumChainID
func (i *EthereumChainID) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("EthereumChainID should be a string, got %s", data)
	}

	var err error
	*i, err = EthereumChainIDString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for EthereumChainID
func (i EthereumChainID) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for EthereumChainID
func (i *EthereumChainID) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = EthereumChainIDString(s)
	return err
}

func (i EthereumChainID) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *EthereumChainID) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of EthereumChainID: %[1]T(%[1]v)", value)
	}

	val, err := EthereumChainIDString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
