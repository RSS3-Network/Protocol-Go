// Code generated by "enumer --values --type=CollectibleType --transform=snake --trimprefix=TypeCollectible --output type_collectible_string.go --json --sql"; DO NOT EDIT.

package filter

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _CollectibleTypeName = "approvalburnminttradetransfer"

var _CollectibleTypeIndex = [...]uint8{0, 8, 12, 16, 21, 29}

const _CollectibleTypeLowerName = "approvalburnminttradetransfer"

func (i CollectibleType) String() string {
	i -= 1
	if i >= CollectibleType(len(_CollectibleTypeIndex)-1) {
		return fmt.Sprintf("CollectibleType(%d)", i+1)
	}
	return _CollectibleTypeName[_CollectibleTypeIndex[i]:_CollectibleTypeIndex[i+1]]
}

func (CollectibleType) Values() []string {
	return CollectibleTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CollectibleTypeNoOp() {
	var x [1]struct{}
	_ = x[TypeCollectibleApproval-(1)]
	_ = x[TypeCollectibleBurn-(2)]
	_ = x[TypeCollectibleMint-(3)]
	_ = x[TypeCollectibleTrade-(4)]
	_ = x[TypeCollectibleTransfer-(5)]
}

var _CollectibleTypeValues = []CollectibleType{TypeCollectibleApproval, TypeCollectibleBurn, TypeCollectibleMint, TypeCollectibleTrade, TypeCollectibleTransfer}

var _CollectibleTypeNameToValueMap = map[string]CollectibleType{
	_CollectibleTypeName[0:8]:        TypeCollectibleApproval,
	_CollectibleTypeLowerName[0:8]:   TypeCollectibleApproval,
	_CollectibleTypeName[8:12]:       TypeCollectibleBurn,
	_CollectibleTypeLowerName[8:12]:  TypeCollectibleBurn,
	_CollectibleTypeName[12:16]:      TypeCollectibleMint,
	_CollectibleTypeLowerName[12:16]: TypeCollectibleMint,
	_CollectibleTypeName[16:21]:      TypeCollectibleTrade,
	_CollectibleTypeLowerName[16:21]: TypeCollectibleTrade,
	_CollectibleTypeName[21:29]:      TypeCollectibleTransfer,
	_CollectibleTypeLowerName[21:29]: TypeCollectibleTransfer,
}

var _CollectibleTypeNames = []string{
	_CollectibleTypeName[0:8],
	_CollectibleTypeName[8:12],
	_CollectibleTypeName[12:16],
	_CollectibleTypeName[16:21],
	_CollectibleTypeName[21:29],
}

// CollectibleTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CollectibleTypeString(s string) (CollectibleType, error) {
	if val, ok := _CollectibleTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CollectibleTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CollectibleType values", s)
}

// CollectibleTypeValues returns all values of the enum
func CollectibleTypeValues() []CollectibleType {
	return _CollectibleTypeValues
}

// CollectibleTypeStrings returns a slice of all String values of the enum
func CollectibleTypeStrings() []string {
	strs := make([]string, len(_CollectibleTypeNames))
	copy(strs, _CollectibleTypeNames)
	return strs
}

// IsACollectibleType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CollectibleType) IsACollectibleType() bool {
	for _, v := range _CollectibleTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CollectibleType
func (i CollectibleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CollectibleType
func (i *CollectibleType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CollectibleType should be a string, got %s", data)
	}

	var err error
	*i, err = CollectibleTypeString(s)
	return err
}

func (i CollectibleType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *CollectibleType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of CollectibleType: %[1]T(%[1]v)", value)
	}

	val, err := CollectibleTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
