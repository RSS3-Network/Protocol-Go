// Code generated by "enumer --values --type=Tag --transform=snake --trimprefix=Tag --output tag_string.go --json --sql"; DO NOT EDIT.

package filter

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _TagName = "unknowntransactioncollectibleexchangesocialmetaverserss"

var _TagIndex = [...]uint8{0, 7, 18, 29, 37, 43, 52, 55}

const _TagLowerName = "unknowntransactioncollectibleexchangesocialmetaverserss"

func (i Tag) String() string {
	if i >= Tag(len(_TagIndex)-1) {
		return fmt.Sprintf("Tag(%d)", i)
	}
	return _TagName[_TagIndex[i]:_TagIndex[i+1]]
}

func (Tag) Values() []string {
	return TagStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TagNoOp() {
	var x [1]struct{}
	_ = x[TagUnknown-(0)]
	_ = x[TagTransaction-(1)]
	_ = x[TagCollectible-(2)]
	_ = x[TagExchange-(3)]
	_ = x[TagSocial-(4)]
	_ = x[TagMetaverse-(5)]
	_ = x[TagRSS-(6)]
}

var _TagValues = []Tag{TagUnknown, TagTransaction, TagCollectible, TagExchange, TagSocial, TagMetaverse, TagRSS}

var _TagNameToValueMap = map[string]Tag{
	_TagName[0:7]:        TagUnknown,
	_TagLowerName[0:7]:   TagUnknown,
	_TagName[7:18]:       TagTransaction,
	_TagLowerName[7:18]:  TagTransaction,
	_TagName[18:29]:      TagCollectible,
	_TagLowerName[18:29]: TagCollectible,
	_TagName[29:37]:      TagExchange,
	_TagLowerName[29:37]: TagExchange,
	_TagName[37:43]:      TagSocial,
	_TagLowerName[37:43]: TagSocial,
	_TagName[43:52]:      TagMetaverse,
	_TagLowerName[43:52]: TagMetaverse,
	_TagName[52:55]:      TagRSS,
	_TagLowerName[52:55]: TagRSS,
}

var _TagNames = []string{
	_TagName[0:7],
	_TagName[7:18],
	_TagName[18:29],
	_TagName[29:37],
	_TagName[37:43],
	_TagName[43:52],
	_TagName[52:55],
}

// TagString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TagString(s string) (Tag, error) {
	if val, ok := _TagNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TagNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Tag values", s)
}

// TagValues returns all values of the enum
func TagValues() []Tag {
	return _TagValues
}

// TagStrings returns a slice of all String values of the enum
func TagStrings() []string {
	strs := make([]string, len(_TagNames))
	copy(strs, _TagNames)
	return strs
}

// IsATag returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Tag) IsATag() bool {
	for _, v := range _TagValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Tag
func (i Tag) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Tag
func (i *Tag) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Tag should be a string, got %s", data)
	}

	var err error
	*i, err = TagString(s)
	return err
}

func (i Tag) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Tag) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Tag: %[1]T(%[1]v)", value)
	}

	val, err := TagString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
