// Code generated by "enumer --values --type=ExchangeType --transform=snake --trimprefix=TypeExchange --output type_exchange_string.go --json --sql"; DO NOT EDIT.

package filter

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _ExchangeTypeName = "swapliquiditystaking"

var _ExchangeTypeIndex = [...]uint8{0, 4, 13, 20}

const _ExchangeTypeLowerName = "swapliquiditystaking"

func (i ExchangeType) String() string {
	i -= 1
	if i >= ExchangeType(len(_ExchangeTypeIndex)-1) {
		return fmt.Sprintf("ExchangeType(%d)", i+1)
	}
	return _ExchangeTypeName[_ExchangeTypeIndex[i]:_ExchangeTypeIndex[i+1]]
}

func (ExchangeType) Values() []string {
	return ExchangeTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ExchangeTypeNoOp() {
	var x [1]struct{}
	_ = x[TypeExchangeSwap-(1)]
	_ = x[TypeExchangeLiquidity-(2)]
	_ = x[TypeExchangeStaking-(3)]
}

var _ExchangeTypeValues = []ExchangeType{TypeExchangeSwap, TypeExchangeLiquidity, TypeExchangeStaking}

var _ExchangeTypeNameToValueMap = map[string]ExchangeType{
	_ExchangeTypeName[0:4]:        TypeExchangeSwap,
	_ExchangeTypeLowerName[0:4]:   TypeExchangeSwap,
	_ExchangeTypeName[4:13]:       TypeExchangeLiquidity,
	_ExchangeTypeLowerName[4:13]:  TypeExchangeLiquidity,
	_ExchangeTypeName[13:20]:      TypeExchangeStaking,
	_ExchangeTypeLowerName[13:20]: TypeExchangeStaking,
}

var _ExchangeTypeNames = []string{
	_ExchangeTypeName[0:4],
	_ExchangeTypeName[4:13],
	_ExchangeTypeName[13:20],
}

// ExchangeTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ExchangeTypeString(s string) (ExchangeType, error) {
	if val, ok := _ExchangeTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ExchangeTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ExchangeType values", s)
}

// ExchangeTypeValues returns all values of the enum
func ExchangeTypeValues() []ExchangeType {
	return _ExchangeTypeValues
}

// ExchangeTypeStrings returns a slice of all String values of the enum
func ExchangeTypeStrings() []string {
	strs := make([]string, len(_ExchangeTypeNames))
	copy(strs, _ExchangeTypeNames)
	return strs
}

// IsAExchangeType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ExchangeType) IsAExchangeType() bool {
	for _, v := range _ExchangeTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ExchangeType
func (i ExchangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ExchangeType
func (i *ExchangeType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ExchangeType should be a string, got %s", data)
	}

	var err error
	*i, err = ExchangeTypeString(s)
	return err
}

func (i ExchangeType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *ExchangeType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of ExchangeType: %[1]T(%[1]v)", value)
	}

	val, err := ExchangeTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
