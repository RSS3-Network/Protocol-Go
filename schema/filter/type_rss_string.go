// Code generated by "enumer --values --type=RSSType --transform=snake --trimprefix=TypeRSS --output type_rss_string.go --json --sql"; DO NOT EDIT.

package filter

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _RSSTypeName = "feed"

var _RSSTypeIndex = [...]uint8{0, 4}

const _RSSTypeLowerName = "feed"

func (i RSSType) String() string {
	i -= 1
	if i >= RSSType(len(_RSSTypeIndex)-1) {
		return fmt.Sprintf("RSSType(%d)", i+1)
	}
	return _RSSTypeName[_RSSTypeIndex[i]:_RSSTypeIndex[i+1]]
}

func (RSSType) Values() []string {
	return RSSTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RSSTypeNoOp() {
	var x [1]struct{}
	_ = x[TypeRSSFeed-(1)]
}

var _RSSTypeValues = []RSSType{TypeRSSFeed}

var _RSSTypeNameToValueMap = map[string]RSSType{
	_RSSTypeName[0:4]:      TypeRSSFeed,
	_RSSTypeLowerName[0:4]: TypeRSSFeed,
}

var _RSSTypeNames = []string{
	_RSSTypeName[0:4],
}

// RSSTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RSSTypeString(s string) (RSSType, error) {
	if val, ok := _RSSTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RSSTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RSSType values", s)
}

// RSSTypeValues returns all values of the enum
func RSSTypeValues() []RSSType {
	return _RSSTypeValues
}

// RSSTypeStrings returns a slice of all String values of the enum
func RSSTypeStrings() []string {
	strs := make([]string, len(_RSSTypeNames))
	copy(strs, _RSSTypeNames)
	return strs
}

// IsARSSType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RSSType) IsARSSType() bool {
	for _, v := range _RSSTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for RSSType
func (i RSSType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for RSSType
func (i *RSSType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("RSSType should be a string, got %s", data)
	}

	var err error
	*i, err = RSSTypeString(s)
	return err
}

func (i RSSType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *RSSType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of RSSType: %[1]T(%[1]v)", value)
	}

	val, err := RSSTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
